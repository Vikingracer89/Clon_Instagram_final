{"ast":null,"code":"export const getAllTweetsService = async () => {\n  const response = await fetch(`${process.env.REACT_APP_BACKEND}`);\n  const json = await response.json();\n\n  if (!response.ok) {\n    throw new Error(json.message);\n  }\n\n  return json.data;\n};\nexport const getSingleTweetService = async id => {\n  const response = await fetch(`${process.env.REACT_APP_BACKEND}/tweet/${id}`);\n  const json = await response.json();\n\n  if (!response.ok) {\n    throw new Error(json.message);\n  }\n\n  return json.data;\n};\nexport const registerUserService = async _ref => {\n  let {\n    email,\n    password\n  } = _ref;\n  const response = await fetch(`${process.env.REACT_APP_BACKEND}/user`, {\n    method: \"POST\",\n    body: JSON.stringify({\n      email,\n      password\n    }),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  const json = await response.json();\n\n  if (!response.ok) {\n    throw new Error(json.message);\n  }\n};\nexport const getMyDataService = async token => {\n  const response = await fetch(`${process.env.REACT_APP_BACKEND}/user`, {\n    headers: {\n      Authorization: token\n    }\n  });\n  const json = await response.json();\n\n  if (!response.ok) {\n    throw new Error(json.message);\n  }\n\n  return json.data;\n};\nexport const getUserDataService = async id => {\n  const response = await fetch(`${process.env.REACT_APP_BACKEND}/user/${id}`);\n  const json = await response.json();\n\n  if (!response.ok) {\n    throw new Error(json.message);\n  }\n\n  return json.data;\n};\nexport const getUserTweetsService = async id => {\n  const response = await fetch(`${process.env.REACT_APP_BACKEND}/user/${id}/tweets`);\n  const json = await response.json();\n\n  if (!response.ok) {\n    throw new Error(json.message);\n  }\n\n  return json.data;\n};\nexport const logInUserService = async _ref2 => {\n  let {\n    email,\n    password\n  } = _ref2;\n  const response = await fetch(`${process.env.REACT_APP_BACKEND}/login`, {\n    method: \"POST\",\n    body: JSON.stringify({\n      email,\n      password\n    }),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  const json = await response.json();\n\n  if (!response.ok) {\n    throw new Error(json.message);\n  }\n\n  return json.data;\n};\nexport const sendTweetService = async _ref3 => {\n  let {\n    data,\n    token\n  } = _ref3;\n  const response = await fetch(`${process.env.REACT_APP_BACKEND}`, {\n    method: \"POST\",\n    body: data,\n    headers: {\n      Authorization: token\n    }\n  });\n  const json = await response.json();\n\n  if (!response.ok) {\n    throw new Error(json.message);\n  }\n\n  return json.data;\n};\nexport const deleteTweetService = async _ref4 => {\n  let {\n    id,\n    token\n  } = _ref4;\n  const response = await fetch(`${process.env.REACT_APP_BACKEND}/tweet/${id}`, {\n    method: \"DELETE\",\n    headers: {\n      Authorization: token\n    }\n  });\n  const json = await response.json();\n\n  if (!response.ok) {\n    throw new Error(json.message);\n  }\n};","map":{"version":3,"names":["getAllTweetsService","response","fetch","process","env","REACT_APP_BACKEND","json","ok","Error","message","data","getSingleTweetService","id","registerUserService","email","password","method","body","JSON","stringify","headers","getMyDataService","token","Authorization","getUserDataService","getUserTweetsService","logInUserService","sendTweetService","deleteTweetService"],"sources":["/home/hack/Documents/JSB09RT/minitwitter-main/frontend/src/services/index.js"],"sourcesContent":["export const getAllTweetsService = async () => {\n  const response = await fetch(`${process.env.REACT_APP_BACKEND}`);\n\n  const json = await response.json();\n\n  if (!response.ok) {\n    throw new Error(json.message);\n  }\n\n  return json.data;\n};\n\nexport const getSingleTweetService = async (id) => {\n  const response = await fetch(`${process.env.REACT_APP_BACKEND}/tweet/${id}`);\n\n  const json = await response.json();\n\n  if (!response.ok) {\n    throw new Error(json.message);\n  }\n\n  return json.data;\n};\n\nexport const registerUserService = async ({ email, password }) => {\n  const response = await fetch(`${process.env.REACT_APP_BACKEND}/user`, {\n    method: \"POST\",\n    body: JSON.stringify({ email, password }),\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n\n  const json = await response.json();\n\n  if (!response.ok) {\n    throw new Error(json.message);\n  }\n};\n\nexport const getMyDataService = async (token) => {\n  const response = await fetch(`${process.env.REACT_APP_BACKEND}/user`, {\n    headers: {\n      Authorization: token,\n    },\n  });\n\n  const json = await response.json();\n\n  if (!response.ok) {\n    throw new Error(json.message);\n  }\n\n  return json.data;\n};\n\nexport const getUserDataService = async (id) => {\n  const response = await fetch(`${process.env.REACT_APP_BACKEND}/user/${id}`);\n\n  const json = await response.json();\n\n  if (!response.ok) {\n    throw new Error(json.message);\n  }\n\n  return json.data;\n};\n\nexport const getUserTweetsService = async (id) => {\n  const response = await fetch(\n    `${process.env.REACT_APP_BACKEND}/user/${id}/tweets`\n  );\n\n  const json = await response.json();\n\n  if (!response.ok) {\n    throw new Error(json.message);\n  }\n\n  return json.data;\n};\n\nexport const logInUserService = async ({ email, password }) => {\n  const response = await fetch(`${process.env.REACT_APP_BACKEND}/login`, {\n    method: \"POST\",\n    body: JSON.stringify({ email, password }),\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n\n  const json = await response.json();\n\n  if (!response.ok) {\n    throw new Error(json.message);\n  }\n\n  return json.data;\n};\n\nexport const sendTweetService = async ({ data, token }) => {\n  const response = await fetch(`${process.env.REACT_APP_BACKEND}`, {\n    method: \"POST\",\n    body: data,\n    headers: {\n      Authorization: token,\n    },\n  });\n\n  const json = await response.json();\n\n  if (!response.ok) {\n    throw new Error(json.message);\n  }\n\n  return json.data;\n};\n\nexport const deleteTweetService = async ({ id, token }) => {\n  const response = await fetch(`${process.env.REACT_APP_BACKEND}/tweet/${id}`, {\n    method: \"DELETE\",\n    headers: {\n      Authorization: token,\n    },\n  });\n\n  const json = await response.json();\n\n  if (!response.ok) {\n    throw new Error(json.message);\n  }\n};\n"],"mappings":"AAAA,OAAO,MAAMA,mBAAmB,GAAG,YAAY;EAC7C,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEC,OAAO,CAACC,GAAR,CAAYC,iBAAkB,EAAlC,CAA5B;EAEA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACK,IAAT,EAAnB;;EAEA,IAAI,CAACL,QAAQ,CAACM,EAAd,EAAkB;IAChB,MAAM,IAAIC,KAAJ,CAAUF,IAAI,CAACG,OAAf,CAAN;EACD;;EAED,OAAOH,IAAI,CAACI,IAAZ;AACD,CAVM;AAYP,OAAO,MAAMC,qBAAqB,GAAG,MAAOC,EAAP,IAAc;EACjD,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEC,OAAO,CAACC,GAAR,CAAYC,iBAAkB,UAASO,EAAG,EAA9C,CAA5B;EAEA,MAAMN,IAAI,GAAG,MAAML,QAAQ,CAACK,IAAT,EAAnB;;EAEA,IAAI,CAACL,QAAQ,CAACM,EAAd,EAAkB;IAChB,MAAM,IAAIC,KAAJ,CAAUF,IAAI,CAACG,OAAf,CAAN;EACD;;EAED,OAAOH,IAAI,CAACI,IAAZ;AACD,CAVM;AAYP,OAAO,MAAMG,mBAAmB,GAAG,cAA+B;EAAA,IAAxB;IAAEC,KAAF;IAASC;EAAT,CAAwB;EAChE,MAAMd,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEC,OAAO,CAACC,GAAR,CAAYC,iBAAkB,OAAlC,EAA0C;IACpEW,MAAM,EAAE,MAD4D;IAEpEC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;MAAEL,KAAF;MAASC;IAAT,CAAf,CAF8D;IAGpEK,OAAO,EAAE;MACP,gBAAgB;IADT;EAH2D,CAA1C,CAA5B;EAQA,MAAMd,IAAI,GAAG,MAAML,QAAQ,CAACK,IAAT,EAAnB;;EAEA,IAAI,CAACL,QAAQ,CAACM,EAAd,EAAkB;IAChB,MAAM,IAAIC,KAAJ,CAAUF,IAAI,CAACG,OAAf,CAAN;EACD;AACF,CAdM;AAgBP,OAAO,MAAMY,gBAAgB,GAAG,MAAOC,KAAP,IAAiB;EAC/C,MAAMrB,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEC,OAAO,CAACC,GAAR,CAAYC,iBAAkB,OAAlC,EAA0C;IACpEe,OAAO,EAAE;MACPG,aAAa,EAAED;IADR;EAD2D,CAA1C,CAA5B;EAMA,MAAMhB,IAAI,GAAG,MAAML,QAAQ,CAACK,IAAT,EAAnB;;EAEA,IAAI,CAACL,QAAQ,CAACM,EAAd,EAAkB;IAChB,MAAM,IAAIC,KAAJ,CAAUF,IAAI,CAACG,OAAf,CAAN;EACD;;EAED,OAAOH,IAAI,CAACI,IAAZ;AACD,CAdM;AAgBP,OAAO,MAAMc,kBAAkB,GAAG,MAAOZ,EAAP,IAAc;EAC9C,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEC,OAAO,CAACC,GAAR,CAAYC,iBAAkB,SAAQO,EAAG,EAA7C,CAA5B;EAEA,MAAMN,IAAI,GAAG,MAAML,QAAQ,CAACK,IAAT,EAAnB;;EAEA,IAAI,CAACL,QAAQ,CAACM,EAAd,EAAkB;IAChB,MAAM,IAAIC,KAAJ,CAAUF,IAAI,CAACG,OAAf,CAAN;EACD;;EAED,OAAOH,IAAI,CAACI,IAAZ;AACD,CAVM;AAYP,OAAO,MAAMe,oBAAoB,GAAG,MAAOb,EAAP,IAAc;EAChD,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CACzB,GAAEC,OAAO,CAACC,GAAR,CAAYC,iBAAkB,SAAQO,EAAG,SADlB,CAA5B;EAIA,MAAMN,IAAI,GAAG,MAAML,QAAQ,CAACK,IAAT,EAAnB;;EAEA,IAAI,CAACL,QAAQ,CAACM,EAAd,EAAkB;IAChB,MAAM,IAAIC,KAAJ,CAAUF,IAAI,CAACG,OAAf,CAAN;EACD;;EAED,OAAOH,IAAI,CAACI,IAAZ;AACD,CAZM;AAcP,OAAO,MAAMgB,gBAAgB,GAAG,eAA+B;EAAA,IAAxB;IAAEZ,KAAF;IAASC;EAAT,CAAwB;EAC7D,MAAMd,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEC,OAAO,CAACC,GAAR,CAAYC,iBAAkB,QAAlC,EAA2C;IACrEW,MAAM,EAAE,MAD6D;IAErEC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;MAAEL,KAAF;MAASC;IAAT,CAAf,CAF+D;IAGrEK,OAAO,EAAE;MACP,gBAAgB;IADT;EAH4D,CAA3C,CAA5B;EAQA,MAAMd,IAAI,GAAG,MAAML,QAAQ,CAACK,IAAT,EAAnB;;EAEA,IAAI,CAACL,QAAQ,CAACM,EAAd,EAAkB;IAChB,MAAM,IAAIC,KAAJ,CAAUF,IAAI,CAACG,OAAf,CAAN;EACD;;EAED,OAAOH,IAAI,CAACI,IAAZ;AACD,CAhBM;AAkBP,OAAO,MAAMiB,gBAAgB,GAAG,eAA2B;EAAA,IAApB;IAAEjB,IAAF;IAAQY;EAAR,CAAoB;EACzD,MAAMrB,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEC,OAAO,CAACC,GAAR,CAAYC,iBAAkB,EAAlC,EAAqC;IAC/DW,MAAM,EAAE,MADuD;IAE/DC,IAAI,EAAEP,IAFyD;IAG/DU,OAAO,EAAE;MACPG,aAAa,EAAED;IADR;EAHsD,CAArC,CAA5B;EAQA,MAAMhB,IAAI,GAAG,MAAML,QAAQ,CAACK,IAAT,EAAnB;;EAEA,IAAI,CAACL,QAAQ,CAACM,EAAd,EAAkB;IAChB,MAAM,IAAIC,KAAJ,CAAUF,IAAI,CAACG,OAAf,CAAN;EACD;;EAED,OAAOH,IAAI,CAACI,IAAZ;AACD,CAhBM;AAkBP,OAAO,MAAMkB,kBAAkB,GAAG,eAAyB;EAAA,IAAlB;IAAEhB,EAAF;IAAMU;EAAN,CAAkB;EACzD,MAAMrB,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEC,OAAO,CAACC,GAAR,CAAYC,iBAAkB,UAASO,EAAG,EAA9C,EAAiD;IAC3EI,MAAM,EAAE,QADmE;IAE3EI,OAAO,EAAE;MACPG,aAAa,EAAED;IADR;EAFkE,CAAjD,CAA5B;EAOA,MAAMhB,IAAI,GAAG,MAAML,QAAQ,CAACK,IAAT,EAAnB;;EAEA,IAAI,CAACL,QAAQ,CAACM,EAAd,EAAkB;IAChB,MAAM,IAAIC,KAAJ,CAAUF,IAAI,CAACG,OAAf,CAAN;EACD;AACF,CAbM"},"metadata":{},"sourceType":"module"}